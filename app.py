import streamlit as st
import pandas as pd
import plotly.express as px

#------------------------------------------------------------------------------------------------------
# Fase 1: Configuraci√≥n inicial
st.set_page_config(page_title="An√°lisis de Luminarias", layout="wide")
st.title("üìä An√°lisis de Base Capital - Luminarias LED")

# Subir archivo
archivo = st.file_uploader("üìÅ Sube tu archivo Excel", type=["xlsx"])

if archivo is not None:
    try:
        # Leer Excel
        df = pd.read_excel(archivo, engine="openpyxl")

        # Renombrar columnas duplicadas
        df.columns = [f"{col}_{i}" if df.columns.tolist().count(col) > 1 else col 
                      for i, col in enumerate(df.columns)]

        # Validar columnas
        columnas_esperadas = [
            'Activo fijo', 'Subn√∫mero', 'Capitalizado el', 'Denominaci√≥n del activo fijo',
            'N√∫mero de serie', 'Denominaci√≥n del activo fijo', 'Cantidad',
            'Amortizaci√≥n normal', 'Val.adq.', 'Amo acum.', 'Val.cont.',
            'Moneda', 'Unidad de Retiro', 'Descripci√≥n SG', 'A√ëO DE ACTIVACI√ìN', '2025'
        ]
        columnas_faltantes = [col for col in columnas_esperadas if col not in df.columns]

        if columnas_faltantes:
            st.error(f"‚ùå Faltan columnas: {columnas_faltantes}")
        else:
            # Normalizar texto en Descripci√≥n SG
            df["Descripci√≥n SG"] = df["Descripci√≥n SG"].astype(str).str.upper().str.strip()
            df["Descripci√≥n SG"] = df["Descripci√≥n SG"].replace("NAN", None)

            # Convertir a n√∫mero columnas clave
            for col in ["A√ëO DE ACTIVACI√ìN", "Val.adq.", "Val.cont.", "Amo acum."]:
                df[col] = pd.to_numeric(df[col], errors='coerce')

            # Fase 2: Resumen por tipo
            tipos = {
                "LED ALTA INTENSIDAD": df["Descripci√≥n SG"] == "LED ALTA INTENSIDAD",
                "LED BAJA INTENSIDAD": df["Descripci√≥n SG"] == "LUMINARIA BAJA INTENSIDAD",
                "Sin categor√≠a (vac√≠o)": df["Descripci√≥n SG"].isna()
            }

            for nombre, filtro in tipos.items():
                st.subheader(f"üî¶ Resumen por A√±o - {nombre}")
                df_filtrado = df[filtro]

                resumen = (
                    df_filtrado.groupby("A√ëO DE ACTIVACI√ìN").agg({
                        "Activo fijo": "count",
                        "Val.adq.": "sum",
                        "Amo acum.": "sum",
                        "Val.cont.": "sum"
                    }).reset_index()
                )

                resumen = resumen.rename(columns={"Activo fijo": "Cantidad de Activos"})

                # Formato de miles
                for col in ["Val.adq.", "Amo acum.", "Val.cont."]:
                    resumen[col] = resumen[col].apply(lambda x: f"{x:,.2f}")

                # Mostrar tabla sin totales a√∫n
                st.dataframe(resumen, use_container_width=True)

                # Agregar fila de totales generales
                totales = {
                    "A√ëO DE ACTIVACI√ìN": "TOTAL",
                    "Cantidad de Activos": resumen["Cantidad de Activos"].sum(),
                    "Val.adq.": resumen["Val.adq."].replace({',': ''}, regex=True).astype(float).sum(),
                    "Amo acum.": resumen["Amo acum."].replace({',': ''}, regex=True).astype(float).sum(),
                    "Val.cont.": resumen["Val.cont."].replace({',': ''}, regex=True).astype(float).sum(),
                }

                totales_formateados = {
                    "A√ëO DE ACTIVACI√ìN": "TOTAL",
                    "Cantidad de Activos": int(totales["Cantidad de Activos"]),
                    "Val.adq.": f"{totales['Val.adq.']:,.2f}",
                    "Amo acum.": f"{totales['Amo acum.']:,.2f}",
                    "Val.cont.": f"{totales['Val.cont.']:,.2f}"
                }

                resumen_total = pd.concat([resumen, pd.DataFrame([totales_formateados])], ignore_index=True)

                def resaltar_total(fila):
                    if fila["A√ëO DE ACTIVACI√ìN"] == "TOTAL":
                        return ['background-color: #c7f5c1; font-weight: bold'] * len(fila)
                    else:
                        return [''] * len(fila)

                st.dataframe(resumen_total.style.apply(resaltar_total, axis=1), use_container_width=True)

    except Exception as e:
        st.error(f"‚ùå Error al procesar el archivo: {str(e)}")

else:
    st.info("üìÇ Sube un archivo Excel con tus luminarias para comenzar.")
